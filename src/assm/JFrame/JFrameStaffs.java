/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package assm.JFrame;

import assm.Objects.Staff;
import assm.Objects.EmployeeListDA;
import assm.Objects.FileCreator;
import java.awt.Image;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author DELL
 */
public class JFrameStaffs extends javax.swing.JFrame implements Runnable {

    DefaultTableModel model;
    TableRowSorter<DefaultTableModel> sorter;

    private final EmployeeListDA empDA = new EmployeeListDA();
    //Create file for storing employee infomations
//    private final FileCreator fileNV = new FileCreator("employee.txt");
    File file = new File("employee.txt");
//    private final JFileChooser openFileNV;
    private String selectedImagePath = "";

    private final String[] comboBoxList = {"Sort ID", "Sort Name", "Sort Age", "Sort Email", "Sort Salary"};

    private int pos = -1;
    private int viewRow, modelRow;
    private int hour, second, minute;

    /**
     * Creates new form NewJFrame
     */
    public JFrameStaffs() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Employee Management Form");

        JFileChooser openFileNV = new JFileChooser();
//        openFileNV.setCurrentDirectory(fileNV.getDesktop());

        Thread t = new Thread(this);
        t.start();

        displayRecord();
    }

    //Fill the data from arraylist to JTable
    private void fillTable(List<Staff> list) {
        model = (DefaultTableModel) empTable.getModel();
        model.setRowCount(0);
        for (Staff e : list) {
            Object[] rowData = new Object[]{e.getId(), e.getName(), e.getAge(),
                e.getEmail(), e.getSalary()};
            model.addRow(rowData);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        qlnvLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        empTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        salaryText = new javax.swing.JTextField();
        emailText = new javax.swing.JTextField();
        idLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        ageLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        salaryLabel = new javax.swing.JLabel();
        idText = new javax.swing.JTextField();
        nameText = new javax.swing.JTextField();
        ageText = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        refreshButton = new javax.swing.JButton();
        viewButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        findButton = new javax.swing.JButton();
        searchText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        clockLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        browseButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        firstButton = new javax.swing.JButton();
        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        lastButton = new javax.swing.JButton();
        recordLabel = new javax.swing.JLabel();
        sortComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("asdasd");
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        qlnvLabel.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        qlnvLabel.setForeground(new java.awt.Color(204, 51, 0));
        qlnvLabel.setText("        STAFF MANAGEMENT");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipady = -18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 67, 0, 0);
        getContentPane().add(qlnvLabel, gridBagConstraints);

        empTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAME", "AGE", "EMAIL", "SALARY"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        empTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                empTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(empTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 811;
        gridBagConstraints.ipady = 290;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(18, 12, 0, 0);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        idLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        idLabel.setForeground(new java.awt.Color(0, 153, 153));
        idLabel.setText("ID");

        nameLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        nameLabel.setForeground(new java.awt.Color(153, 0, 204));
        nameLabel.setText("NAME");

        ageLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ageLabel.setForeground(new java.awt.Color(204, 0, 0));
        ageLabel.setText("AGE");

        emailLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        emailLabel.setForeground(new java.awt.Color(102, 102, 0));
        emailLabel.setText("EMAIL");

        salaryLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        salaryLabel.setForeground(new java.awt.Color(102, 204, 0));
        salaryLabel.setText("SALARY(USD)");

        idText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idTextActionPerformed(evt);
            }
        });

        nameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextActionPerformed(evt);
            }
        });

        refreshButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        refreshButton.setForeground(new java.awt.Color(51, 0, 255));
        refreshButton.setText("Refresh");
        refreshButton.setBorderPainted(false);
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        viewButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        viewButton.setForeground(new java.awt.Color(0, 153, 153));
        viewButton.setText("View");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(0, 102, 102));
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        findButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        findButton.setForeground(new java.awt.Color(153, 0, 0));
        findButton.setText("Find");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });

        searchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextActionPerformed(evt);
            }
        });
        searchText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Search");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(findButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                    .addComponent(viewButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(refreshButton)
                .addGap(36, 36, 36)
                .addComponent(viewButton)
                .addGap(32, 32, 32)
                .addComponent(deleteButton)
                .addGap(35, 35, 35)
                .addComponent(findButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)))
        );

        clockLabel.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        clockLabel.setForeground(new java.awt.Color(204, 0, 153));
        clockLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(salaryLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idText, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ageText, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(emailText, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(salaryText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(clockLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(idLabel)
                        .addGap(22, 22, 22)
                        .addComponent(nameLabel))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(idText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ageText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ageLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(emailText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(emailLabel)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(salaryLabel)
                            .addComponent(salaryText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addComponent(clockLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 53;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 18, 0, 0);
        getContentPane().add(jPanel2, gridBagConstraints);

        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 153, 153), null));

        browseButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        browseButton.setForeground(new java.awt.Color(204, 51, 0));
        browseButton.setText("Images");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(browseButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(browseButton))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 12, 0, 0);
        getContentPane().add(jPanel3, gridBagConstraints);

        firstButton.setText("|<");
        firstButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstButtonActionPerformed(evt);
            }
        });

        previousButton.setText("<<");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        nextButton.setText(">>");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        lastButton.setText(">|");
        lastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastButtonActionPerformed(evt);
            }
        });

        recordLabel.setForeground(new java.awt.Color(255, 51, 0));
        recordLabel.setText("Record: 1 of 10");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(firstButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(previousButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lastButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(recordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstButton)
                    .addComponent(previousButton)
                    .addComponent(nextButton)
                    .addComponent(lastButton)
                    .addComponent(recordLabel)))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 56, 31, 0);
        getContentPane().add(jPanel4, gridBagConstraints);

        sortComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "...", "Sort ID", "Sort Name", "Sort Age", "Sort Email", "Sort Salary" }));
        sortComboBox.setToolTipText("");
        sortComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 41;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(29, 12, 31, 0);
        getContentPane().add(sortComboBox, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        clearForm();
        pos = -1;
    }//GEN-LAST:event_refreshButtonActionPerformed
    public void clearForm() {
        idText.setText("");
        nameText.setText("");
        ageText.setText("");
        emailText.setText("");
        salaryText.setText(""); 
        imageLabel.setIcon(null);
        selectedImagePath = "";
        searchText.setText("");
        sortComboBox.setSelectedIndex(0);
    }

    private void writeObject(String path) {
        try {
            FileOutputStream fos = new FileOutputStream(path);
            ObjectOutputStream oos = new ObjectOutputStream(fos);

            oos.writeObject(empDA.returnEmpList());
          

            fos.close();
            oos.close();
        } catch (Exception e) {
            
            e.getStackTrace();
        }

    }

    private void readObject(String path) {
        try {
            FileInputStream fis = new FileInputStream(path);
            ObjectInputStream ois = new ObjectInputStream(fis);

            Object obj = ois.readObject();
            empDA.setEmpList(obj);

            fis.close();
            ois.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "An error occurred while reading the file or the file is empty...");
            e.getStackTrace();
        }
    }
    //Display specific employee info to the form
    public void setModel(Staff e) {
        idText.setText(e.getId());
        nameText.setText(e.getName());
        ageText.setText(String.valueOf(e.getAge()));
        emailText.setText(e.getEmail());
        salaryText.setText(String.valueOf(e.getSalary()));
        selectedImagePath = e.getImagePath();
        imageLabel.setIcon(rescaleImage(selectedImagePath, imageLabel));
    }

    private void moveElementInTable(String action) {
        Staff e;
        if (empDA.getEmpListSize() != 0 || empDA.returnSortList().size() != 0) {
            if (action.equals("previous")) {
                pos--;
                if (pos < 0) {
                    pos = 0;
                }
                e = empDA.getEmp(pos);
                setModel(e);
                empTable.setRowSelectionInterval(pos, pos);
            } else if (action.equals("next")) {
                pos++;
                if (pos > empDA.getEmpListSize() - 1) {
                    pos = empDA.getEmpListSize() - 1;
                }
                e = empDA.getEmp(pos);
                setModel(e);
                empTable.setRowSelectionInterval(pos, pos);
            } else if (action.equals("first")) {
                pos = 0;
                e = empDA.getEmp(pos);
                setModel(e);
                empTable.setRowSelectionInterval(pos, pos);
            } else if (action.equals("last")) {
                pos = empDA.getEmpListSize() - 1;
                e = empDA.getEmp(pos);
                setModel(e);
                empTable.setRowSelectionInterval(pos, pos);
            }
        }
        displayRecord();
    }
    private void firstButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstButtonActionPerformed
        moveElementInTable("first");
    }//GEN-LAST:event_firstButtonActionPerformed

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        moveElementInTable("previous");
    }//GEN-LAST:event_previousButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        moveElementInTable("next");
    }//GEN-LAST:event_nextButtonActionPerformed
    private void lastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastButtonActionPerformed
        moveElementInTable("last");
    }//GEN-LAST:event_lastButtonActionPerformed

    //Method for display the index of each employee in array
    private void displayRecord() {
        if (searchText.getText().length() != 0) {

            recordLabel.setText("Record: " + (pos + 1) + " of " + empDA.returnSortList().size());
        } else {
            recordLabel.setText("Record: " + (pos + 1) + " of " + empDA.getEmpListSize());
        }
    }

    private String validateNewEmployee() {
        String error = "";
        String emailRegex = "^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$";
        Pattern pattern = Pattern.compile(emailRegex);
        Matcher matcher = pattern.matcher(String.valueOf(emailText.getText()));

        if (idText.getText().length() == 0) {
            error += "ID cannot be empty\n";
        }

        if (nameText.getText().length() == 0) {
            error += "Name cannot be empty";
        }
        
       
        int ageLength = ageText.getText().length();
        try{
            if (ageLength != 0) {
            int age = Integer.parseInt(ageText.getText());
            if (age <= 16 || age >= 65) {
                error += "Age must 16 to 65\n";
            }
        } else {
            error += "Age cannot  be empty\n";
        }
        }catch(Exception ex){
            System.out.println("You must input number of age");
        }
        
        
        if (matcher.matches() == false) {
            error += "Email is not in the correct format";
        }
try{
    int salaryLength = salaryText.getText().length();
        if (salaryLength != 0) {
            double salary = Double.parseDouble(salaryText.getText());
            if (salary <= 500) {
                error += "salary must be more than 500";
            }
        } else {
            error += "Salary cannot be empty";
        }
} catch (Exception ex){
    System.out.println("You must enter the correct format");
}
//        int salaryLength = salaryText.getText().length();
//        if (salaryLength != 0) {
//            double salary = Double.parseDouble(salaryText.getText());
//            if (salary <= 5000000) {
//                error += "Lương phải trên 5 triệu\n";
//            }
//        } else {
//            error += "Lương không được trống\n";
//        }

        if (selectedImagePath == "") {
            error += "Image not selected\\n";
        }
        return error;
    }
    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        if (pos == -1) {
            addEmployee();
        } else {
            updateEmployee();
        }
        empTable.clearSelection();
        pos = -1;
        displayRecord();
        if (empList.isEmpty()) {
            try (ObjectInputStream in = new ObjectInputStream(
                    new BufferedInputStream(new FileInputStream(file)))) {
                empList.addAll(
                        (Collection<?>) in.readObject());
            } catch (Exception ex) {
            }
        }
    }//GEN-LAST:event_viewButtonActionPerformed
    private void addEmployee() {
        //Validate all fields and check the ID whether the employee is duplicated or not
        
        boolean isExist = false;
        for (Staff e : empDA.returnEmpList()) {
            if (e.getId().equalsIgnoreCase(idText.getText())) {
                isExist = true;
                break;
            }
        }

        if (!isExist) {
            String error = validateNewEmployee();
            try {
                Staff newEmp = new Staff();
                newEmp.setId(idText.getText());
                newEmp.setName(nameText.getText());
                newEmp.setAge(Integer.parseInt(ageText.getText()));
                newEmp.setEmail(emailText.getText());
                newEmp.setSalary(Double.parseDouble(salaryText.getText()));
                newEmp.setImagePath(selectedImagePath);
                empDA.addEmp(newEmp);
                fillTable(empDA.returnEmpList());
            } catch (NumberFormatException ex) {
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "You have entered the same employee ID!!!");
        }
        String file = null;
        try (ObjectOutputStream out = new ObjectOutputStream(
                new BufferedOutputStream(new FileOutputStream(file)))) {
            Object empList;
            empList = null;
            out.writeObject(empList);
        } catch (Exception ex) {
        }
        JOptionPane.showMessageDialog(this, "Insert Successfully!!!!");

    }

    private void updateEmployee() {
        String error = validateNewEmployee();
        if (error.equals("")) {
            Staff emp = new Staff();
            emp.setId(idText.getText());
            emp.setName(nameText.getText());
            emp.setAge(Integer.parseInt(ageText.getText()));
            emp.setEmail(emailText.getText());
            emp.setSalary(Double.parseDouble(salaryText.getText()));
            emp.setImagePath(selectedImagePath);
            empDA.updateEmp(pos, emp);
            fillTable(empDA.returnEmpList());
        } else {
            JOptionPane.showMessageDialog(rootPane, error);
        }
        try (ObjectOutputStream out = new ObjectOutputStream(
                new BufferedOutputStream(new FileOutputStream(file)))) {
            Object empList = null;
            out.writeObject(empList);
        } catch (Exception ex) {
        }
    }
    private void empTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_empTableMouseClicked
        pos = empTable.getSelectedRow();

        //check if the JTextField search is empty then populate the empList to table
        if (searchText.getText().length() != 0 || empDA.returnSortList().size() != 0) {
            setModel(empDA.returnSortList().get(pos));
        } else {
            setModel(empDA.getEmp(pos));
        }
        displayRecord();
    }//GEN-LAST:event_empTableMouseClicked

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (pos == -1) {
            JOptionPane.showMessageDialog(rootPane, "You forgot to select the row to delete!");
        } else {
            if (searchText.getText().length() != 0 || empDA.returnSortList().size() != 0) {
                String selectedEmpID = empDA.returnSortList().get(pos).getId();
                empDA.returnEmpList().removeIf(
                        baseEmp -> (baseEmp.getId().equalsIgnoreCase(selectedEmpID))
                );
                fillTable(empDA.returnSortList());
                JOptionPane.showMessageDialog(rootPane, "Successfully deleted employee with code " + selectedEmpID);
            } else {
                empDA.removeEmp(pos);
                fillTable(empDA.returnEmpList());
                JOptionPane.showMessageDialog(rootPane, "Successfully deleted employee with code " + empDA.getEmp(pos).getId());
            }
            clearForm();
        }
        pos = -1;
        displayRecord();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        if (idText.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Please enter the Code to search!");
        } else {
            //Check whether the employee even exist
            boolean isExist = false;
            for (int i = 0; i < empDA.getEmpListSize(); i++) {
                if (idText.getText().equalsIgnoreCase(empDA.getEmp(i).getId())) {
                    pos = i;
                    setModel(empDA.getEmp(i));
                    empTable.setRowSelectionInterval(i, i);
                    isExist = true;
                }
            }
            if (isExist == false) {
                JOptionPane.showMessageDialog(rootPane, "Staff " + idText.getText() + " Does not exist to search!");
            }
        }

    }//GEN-LAST:event_findButtonActionPerformed
    //Resize method to fit JLabel width and height
    private ImageIcon rescaleImage(String path, JLabel label) {
        ImageIcon ii = new ImageIcon(path);
        Image image = ii.getImage().getScaledInstance(label.getWidth(), label.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon newII = new ImageIcon(image);
        return newII;
    }

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        //Set starting directory for file chooser
        try{
             String currentDict = System.getProperty("user.dir");
        JFileChooser chooser = new JFileChooser(currentDict + "\\src\\assm\\Images");

        //Display only .png .jpg .jpeg file
        FileNameExtensionFilter filter = new FileNameExtensionFilter("IMAGES", "png", "jpg", "jpeg");
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Choose image");
        int returnValue = chooser.showOpenDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedImage = chooser.getSelectedFile();
            selectedImagePath = selectedImage.getAbsolutePath();

            //Resize and set image to JLabel
            imageLabel.setIcon(rescaleImage(selectedImagePath, imageLabel));
        }
        }catch (Exception ex){
            System.out.println("You must choose png, jpg, jpg");
        }
//        String currentDict = System.getProperty("user.dir");
//        JFileChooser chooser = new JFileChooser(currentDict + "\\src\\assm\\Images");
//
//        //Display only .png .jpg .jpeg file
//        FileNameExtensionFilter filter = new FileNameExtensionFilter("IMAGES", "png", "jpg", "jpeg");
//        chooser.setFileFilter(filter);
//        chooser.setDialogTitle("Choose image");
//        int returnValue = chooser.showOpenDialog(null);
//
//        if (returnValue == JFileChooser.APPROVE_OPTION) {
//            File selectedImage = chooser.getSelectedFile();
//            selectedImagePath = selectedImage.getAbsolutePath();
//
//            //Resize and set image to JLabel
//            imageLabel.setIcon(rescaleImage(selectedImagePath, imageLabel));
//        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void searchTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextKeyReleased
        if (searchText.getText().length() == 0) {
            fillTable(empDA.returnEmpList());
        }
        empDA.searchInList(searchText.getText());
        fillTable(empDA.returnSortList());
        displayRecord();
    }//GEN-LAST:event_searchTextKeyReleased

    private void sortComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortComboBoxActionPerformed
        List<Staff> list = empDA.returnEmpList();
        List<Staff> sortList = empDA.returnSortList();
        sortList.clear();
        sortList.addAll(list);
        int index = sortComboBox.getSelectedIndex();
        if (index == 0) {
            fillTable(list);
        } else if (index == 1) {
            Collections.sort(sortList, (Staff o1, Staff o2) -> o1.getId().compareTo(o2.getId()));
            fillTable(sortList);
        } else if (index == 2) {
            Collections.sort(sortList, (Staff o1, Staff o2) -> o1.getName().compareTo(o2.getName()));
            Collections.reverse(sortList);
            fillTable(sortList);
        } else if (index == 3) {
            Collections.sort(sortList, (Staff o1, Staff o2) -> Integer.compare(o1.getAge(), o2.getAge()));
            Collections.reverse(sortList);
            fillTable(sortList);
        } else if (index == 4) {
            Collections.sort(sortList, (Staff o1, Staff o2) -> o1.getEmail().compareTo(o2.getEmail()));
            Collections.reverse(sortList);
            fillTable(sortList);
        } else if (index == 5) {
            Collections.sort(sortList, (Staff o1, Staff o2) -> Double.compare(o1.getSalary(), o2.getSalary()));
            Collections.reverse(sortList);
            fillTable(sortList);
        }
    }//GEN-LAST:event_sortComboBoxActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        empTable.clearSelection();
        pos = -1;
    }//GEN-LAST:event_formMouseClicked

    private void idTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idTextActionPerformed

    private void nameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTextActionPerformed

    private void searchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameStaffs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameStaffs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameStaffs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameStaffs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameStaffs().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ageLabel;
    private javax.swing.JTextField ageText;
    private javax.swing.JButton browseButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel clockLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailText;
    private javax.swing.JTable empTable;
    private javax.swing.JButton findButton;
    private javax.swing.JButton firstButton;
    private javax.swing.JLabel idLabel;
    private javax.swing.JTextField idText;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton lastButton;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton previousButton;
    private javax.swing.JLabel qlnvLabel;
    private javax.swing.JLabel recordLabel;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel salaryLabel;
    private javax.swing.JTextField salaryText;
    private javax.swing.JTextField searchText;
    private javax.swing.JComboBox<String> sortComboBox;
    private javax.swing.JButton viewButton;
    // End of variables declaration//GEN-END:variables

    //Display digital clock using Thread
    @Override
    public void run() {
        while (true) {
            Calendar calen = Calendar.getInstance();

            //get current time
            hour = calen.get(Calendar.HOUR_OF_DAY);
            minute = calen.get(Calendar.MINUTE);
            second = calen.get(Calendar.SECOND);

            //set time to specific format
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss aa ");
            Date date = calen.getTime();
            String clock = sdf.format(date);

            //set to label
            clockLabel.setText(clock);
        }
    }

}
